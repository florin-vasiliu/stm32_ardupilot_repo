
scheduler_implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  0800019c  0800019c  0000119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08000ea8  08000ea8  00001ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f60  08000f60  00001f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f64  08000f64  00001f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000f68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aa6  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000395  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00002ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000101  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d98  00000000  00000000  00003139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015a7  00000000  00000000  00005ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009be2  00000000  00000000  00007478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001105a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b10  00000000  00000000  000110a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00011bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800019c <__do_global_dtors_aux>:
 800019c:	b510      	push	{r4, lr}
 800019e:	4c05      	ldr	r4, [pc, #20]	@ (80001b4 <__do_global_dtors_aux+0x18>)
 80001a0:	7823      	ldrb	r3, [r4, #0]
 80001a2:	b933      	cbnz	r3, 80001b2 <__do_global_dtors_aux+0x16>
 80001a4:	4b04      	ldr	r3, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x1c>)
 80001a6:	b113      	cbz	r3, 80001ae <__do_global_dtors_aux+0x12>
 80001a8:	4804      	ldr	r0, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x20>)
 80001aa:	f3af 8000 	nop.w
 80001ae:	2301      	movs	r3, #1
 80001b0:	7023      	strb	r3, [r4, #0]
 80001b2:	bd10      	pop	{r4, pc}
 80001b4:	2000005c 	.word	0x2000005c
 80001b8:	00000000 	.word	0x00000000
 80001bc:	08000e90 	.word	0x08000e90

080001c0 <frame_dummy>:
 80001c0:	b508      	push	{r3, lr}
 80001c2:	4b03      	ldr	r3, [pc, #12]	@ (80001d0 <frame_dummy+0x10>)
 80001c4:	b11b      	cbz	r3, 80001ce <frame_dummy+0xe>
 80001c6:	4903      	ldr	r1, [pc, #12]	@ (80001d4 <frame_dummy+0x14>)
 80001c8:	4803      	ldr	r0, [pc, #12]	@ (80001d8 <frame_dummy+0x18>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	00000000 	.word	0x00000000
 80001d4:	20000060 	.word	0x20000060
 80001d8:	08000e90 	.word	0x08000e90

080001dc <generate_interrupt>:
	__asm volatile ("BX LR");
}

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
	uint32_t *pSTIR = (uint32_t*)0xE000EF00;
 80001e2:	4b09      	ldr	r3, [pc, #36]	@ (8000208 <generate_interrupt+0x2c>)
 80001e4:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <generate_interrupt+0x30>)
 80001e8:	603b      	str	r3, [r7, #0]

	/* enable IRQ3 interrupt */
	*pISER0 |= (1 << 3);
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 0208 	orr.w	r2, r3, #8
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	601a      	str	r2, [r3, #0]

	/* generate an interrupt from software for IRQ3 */
	*pSTIR = (3 & 0x1FF);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2203      	movs	r2, #3
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	e000ef00 	.word	0xe000ef00
 800020c:	e000e100 	.word	0xe000e100

08000210 <init_systick_timer>:
	__asm volatile ("ORR R0, R0,#0x01"); /* change the privileged value to unprivileged */
	//Write
	__asm volatile ("MSR CONTROL, R0");
}

void init_systick_timer(uint32_t tick_hz){
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <init_systick_timer+0x68>)
 800021a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800021c:	4b17      	ldr	r3, [pc, #92]	@ (800027c <init_systick_timer+0x6c>)
 800021e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000220:	4a17      	ldr	r2, [pc, #92]	@ (8000280 <init_systick_timer+0x70>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	fbb2 f3f3 	udiv	r3, r2, r3
 8000228:	3b01      	subs	r3, #1
 800022a:	60fb      	str	r3, [r7, #12]
	// clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	601a      	str	r2, [r3, #0]
	// load the count value
	*pSRVR |= count_value;
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	431a      	orrs	r2, r3
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	601a      	str	r2, [r3, #0]

	__asm volatile ("CPSIE i"); //enable global interrupts
 8000244:	b662      	cpsie	i

	// enable the systick timer and select processor clock and enable interrupt
	*pSCSR |= (1 << 2); // enable interrupt
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0204 	orr.w	r2, r3, #4
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1); // select processor clock
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 0202 	orr.w	r2, r3, #2
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0); // enable systick timer
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0201 	orr.w	r2, r3, #1
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]
}
 800026a:	bf00      	nop
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000e014 	.word	0xe000e014
 800027c:	e000e010 	.word	0xe000e010
 8000280:	00f42400 	.word	0x00f42400

08000284 <main>:
void task3_handler(void);
void task4_handler(void);
void SysTick_Handler(void);

int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
	/* Create round robin scheuler */

	init_systick_timer(TICK_HZ);
 800028a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800028e:	f7ff ffbf 	bl	8000210 <init_systick_timer>
	/* Demonstrate the generation of an interrupt */
	// 1. First configure USART3 peripheral (missing in current code)
	// Configure USART3 here...

	// 2. Configure NVIC with proper priority
	uint32_t *pIPR5 = (uint32_t*)(0xE000E400 + (USART3_IRQNO / 4));
 8000292:	4b27      	ldr	r3, [pc, #156]	@ (8000330 <main+0xac>)
 8000294:	61fb      	str	r3, [r7, #28]
	*pIPR5 &= ~(0xFF << ((USART3_IRQNO % 4) * 8));  // Clear priority
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	601a      	str	r2, [r3, #0]
	*pIPR5 |= (0x50 << ((USART3_IRQNO % 4) * 8));   // Set priority to mid-range (0x50)
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	601a      	str	r2, [r3, #0]

	// 3. Enable the specific interrupt
	uint32_t *pISER1 = (uint32_t*)0xE000E104;
 80002ae:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <main+0xb0>)
 80002b0:	61bb      	str	r3, [r7, #24]
	*pISER1 |= (1 << 7);
 80002b2:	69bb      	ldr	r3, [r7, #24]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	601a      	str	r2, [r3, #0]

	// 4. Enable global interrupts
	__asm volatile ("CPSIE i");
 80002be:	b662      	cpsie	i

	// 5. Now set the pending bit to trigger the interrupt
	uint32_t *pISPR1 = (uint32_t*)0xE000E204;
 80002c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000338 <main+0xb4>)
 80002c2:	617b      	str	r3, [r7, #20]
	*pISPR1 |= (1 << 7);
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]

	/* Demonstrate changing stack pointer from main to psp */
	//change_sp_to_psp();

	/* Demonstrate bit-banding */
	uint8_t *ptr = (uint8_t*)0x20000200; //some address in SRAM
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <main+0xb8>)
 80002d2:	613b      	str	r3, [r7, #16]
	*ptr = 0xff;
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	22ff      	movs	r2, #255	@ 0xff
 80002d8:	701a      	strb	r2, [r3, #0]
	//normal method
	*ptr &= ~(1 << 7); //clear bit 7
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	701a      	strb	r2, [r3, #0]
	//reset to 0xff
	*ptr = 0xff;
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	22ff      	movs	r2, #255	@ 0xff
 80002ec:	701a      	strb	r2, [r3, #0]
	//bit-banding method
	uint8_t *bitband_addr = (uint8_t*) (ALIAS_BASE + (32 * (0x20000200 - BITBAND_BASE)) + (7 * 4));
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <main+0xbc>)
 80002f0:	60fb      	str	r3, [r7, #12]
	*bitband_addr = 0; //clear bit 7
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]

	/* Demonstrate inline assembly coding */
	__asm volatile ("LDR R1, =#0X20001000");
 80002f8:	4914      	ldr	r1, [pc, #80]	@ (800034c <main+0xc8>)
	__asm volatile ("LDR R2, =#0X20001004");
 80002fa:	4a15      	ldr	r2, [pc, #84]	@ (8000350 <main+0xcc>)
	__asm volatile ("LDR R0, [R1]");
 80002fc:	6808      	ldr	r0, [r1, #0]
	__asm volatile ("LDR R1, [R2]");
 80002fe:	6811      	ldr	r1, [r2, #0]
	__asm volatile ("ADD R0, R0, R1");
 8000300:	4408      	add	r0, r1
	__asm volatile ("STR R0, [R2]");
 8000302:	6010      	str	r0, [r2, #0]

	int val1=50;
 8000304:	2332      	movs	r3, #50	@ 0x32
 8000306:	60bb      	str	r3, [r7, #8]
	int val2 = 10;
 8000308:	230a      	movs	r3, #10
 800030a:	607b      	str	r3, [r7, #4]
	__asm volatile ("ADD R0, %0, %1": :"r"(val1),"r"(val2));
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	eb03 0002 	add.w	r0, r3, r2

	/* using special registers */
	/* read CONTROL special register */
	int control_reg;
	__asm volatile ("MRS %0, CONTROL": "=r"(control_reg) );
 8000314:	f3ef 8314 	mrs	r3, CONTROL
 8000318:	603b      	str	r3, [r7, #0]

	/* Changing privilege access level */
	/* change_access_level_unpriv(); */

	/* demonstrate interrupt mode */
	printf("In thread mode : before interrupt\n");
 800031a:	480a      	ldr	r0, [pc, #40]	@ (8000344 <main+0xc0>)
 800031c:	f000 fa24 	bl	8000768 <puts>
	generate_interrupt();
 8000320:	f7ff ff5c 	bl	80001dc <generate_interrupt>
	printf("In thread mode : after interrupt\n");
 8000324:	4808      	ldr	r0, [pc, #32]	@ (8000348 <main+0xc4>)
 8000326:	f000 fa1f 	bl	8000768 <puts>


	/* Loop forever */
	for(;;);
 800032a:	bf00      	nop
 800032c:	e7fd      	b.n	800032a <main+0xa6>
 800032e:	bf00      	nop
 8000330:	e000e409 	.word	0xe000e409
 8000334:	e000e104 	.word	0xe000e104
 8000338:	e000e204 	.word	0xe000e204
 800033c:	20000200 	.word	0x20000200
 8000340:	2200401c 	.word	0x2200401c
 8000344:	08000ea8 	.word	0x08000ea8
 8000348:	08000ecc 	.word	0x08000ecc
 800034c:	20001000 	.word	0x20001000
 8000350:	20001004 	.word	0x20001004

08000354 <RTC_WKUP_IRQHandler>:
}

void RTC_WKUP_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	printf("in handler mode : ISR\n");
 8000358:	4802      	ldr	r0, [pc, #8]	@ (8000364 <RTC_WKUP_IRQHandler+0x10>)
 800035a:	f000 fa05 	bl	8000768 <puts>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	08000ef0 	.word	0x08000ef0

08000368 <HardFault_Handler>:

void HardFault_Handler(void)
/* function created to demonstrate failure to modify system level registers (interrupt handler) in unprivileged access mode*/
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	printf("in HardFault detected\n");
 800036c:	4802      	ldr	r0, [pc, #8]	@ (8000378 <HardFault_Handler+0x10>)
 800036e:	f000 f9fb 	bl	8000768 <puts>
	while(1);
 8000372:	bf00      	nop
 8000374:	e7fd      	b.n	8000372 <HardFault_Handler+0xa>
 8000376:	bf00      	nop
 8000378:	08000f08 	.word	0x08000f08

0800037c <USART3_IRQHandler>:
}

void USART3_IRQHandler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	printf("In USART3 isr\n");
 8000380:	4802      	ldr	r0, [pc, #8]	@ (800038c <USART3_IRQHandler+0x10>)
 8000382:	f000 f9f1 	bl	8000768 <puts>
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	08000f20 	.word	0x08000f20

08000390 <SysTick_Handler>:
		printf("I am task 4\n");
	}
}

void SysTick_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	//Scheduler code to be added here
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b086      	sub	sp, #24
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	e00a      	b.n	80003c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003b0:	f3af 8000 	nop.w
 80003b4:	4601      	mov	r1, r0
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	60ba      	str	r2, [r7, #8]
 80003bc:	b2ca      	uxtb	r2, r1
 80003be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	3301      	adds	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dbf0      	blt.n	80003b0 <_read+0x12>
  }

  return len;
 80003ce:	687b      	ldr	r3, [r7, #4]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	e009      	b.n	80003fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	60ba      	str	r2, [r7, #8]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	429a      	cmp	r2, r3
 8000404:	dbf1      	blt.n	80003ea <_write+0x12>
  }
  return len;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_close>:

int _close(int file)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000438:	605a      	str	r2, [r3, #4]
  return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <_isatty>:

int _isatty(int file)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000450:	2301      	movs	r3, #1
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000480:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <_sbrk+0x5c>)
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <_sbrk+0x60>)
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800048c:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d102      	bne.n	800049a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <_sbrk+0x64>)
 8000496:	4a12      	ldr	r2, [pc, #72]	@ (80004e0 <_sbrk+0x68>)
 8000498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d207      	bcs.n	80004b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a8:	f000 fa8c 	bl	80009c4 <__errno>
 80004ac:	4603      	mov	r3, r0
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e009      	b.n	80004cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004be:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <_sbrk+0x64>)
 80004c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20030000 	.word	0x20030000
 80004d8:	00000400 	.word	0x00000400
 80004dc:	20000078 	.word	0x20000078
 80004e0:	200001c8 	.word	0x200001c8

080004e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480c      	ldr	r0, [pc, #48]	@ (8000520 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490d      	ldr	r1, [pc, #52]	@ (8000524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0a      	ldr	r4, [pc, #40]	@ (8000530 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000512:	f000 fa5d 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000516:	f7ff feb5 	bl	8000284 <main>

0800051a <LoopForever>:

LoopForever:
  b LoopForever
 800051a:	e7fe      	b.n	800051a <LoopForever>
  ldr   r0, =_estack
 800051c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000528:	08000f68 	.word	0x08000f68
  ldr r2, =_sbss
 800052c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000530:	200001c8 	.word	0x200001c8

08000534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC_IRQHandler>
	...

08000538 <std>:
 8000538:	2300      	movs	r3, #0
 800053a:	b510      	push	{r4, lr}
 800053c:	4604      	mov	r4, r0
 800053e:	e9c0 3300 	strd	r3, r3, [r0]
 8000542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000546:	6083      	str	r3, [r0, #8]
 8000548:	8181      	strh	r1, [r0, #12]
 800054a:	6643      	str	r3, [r0, #100]	@ 0x64
 800054c:	81c2      	strh	r2, [r0, #14]
 800054e:	6183      	str	r3, [r0, #24]
 8000550:	4619      	mov	r1, r3
 8000552:	2208      	movs	r2, #8
 8000554:	305c      	adds	r0, #92	@ 0x5c
 8000556:	f000 f9e7 	bl	8000928 <memset>
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <std+0x58>)
 800055c:	6263      	str	r3, [r4, #36]	@ 0x24
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <std+0x5c>)
 8000560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <std+0x60>)
 8000564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <std+0x64>)
 8000568:	6323      	str	r3, [r4, #48]	@ 0x30
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <std+0x68>)
 800056c:	6224      	str	r4, [r4, #32]
 800056e:	429c      	cmp	r4, r3
 8000570:	d006      	beq.n	8000580 <std+0x48>
 8000572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000576:	4294      	cmp	r4, r2
 8000578:	d002      	beq.n	8000580 <std+0x48>
 800057a:	33d0      	adds	r3, #208	@ 0xd0
 800057c:	429c      	cmp	r4, r3
 800057e:	d105      	bne.n	800058c <std+0x54>
 8000580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000588:	f000 ba46 	b.w	8000a18 <__retarget_lock_init_recursive>
 800058c:	bd10      	pop	{r4, pc}
 800058e:	bf00      	nop
 8000590:	08000779 	.word	0x08000779
 8000594:	0800079b 	.word	0x0800079b
 8000598:	080007d3 	.word	0x080007d3
 800059c:	080007f7 	.word	0x080007f7
 80005a0:	2000007c 	.word	0x2000007c

080005a4 <stdio_exit_handler>:
 80005a4:	4a02      	ldr	r2, [pc, #8]	@ (80005b0 <stdio_exit_handler+0xc>)
 80005a6:	4903      	ldr	r1, [pc, #12]	@ (80005b4 <stdio_exit_handler+0x10>)
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <stdio_exit_handler+0x14>)
 80005aa:	f000 b869 	b.w	8000680 <_fwalk_sglue>
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08000d19 	.word	0x08000d19
 80005b8:	20000010 	.word	0x20000010

080005bc <cleanup_stdio>:
 80005bc:	6841      	ldr	r1, [r0, #4]
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <cleanup_stdio+0x34>)
 80005c0:	4299      	cmp	r1, r3
 80005c2:	b510      	push	{r4, lr}
 80005c4:	4604      	mov	r4, r0
 80005c6:	d001      	beq.n	80005cc <cleanup_stdio+0x10>
 80005c8:	f000 fba6 	bl	8000d18 <_fflush_r>
 80005cc:	68a1      	ldr	r1, [r4, #8]
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <cleanup_stdio+0x38>)
 80005d0:	4299      	cmp	r1, r3
 80005d2:	d002      	beq.n	80005da <cleanup_stdio+0x1e>
 80005d4:	4620      	mov	r0, r4
 80005d6:	f000 fb9f 	bl	8000d18 <_fflush_r>
 80005da:	68e1      	ldr	r1, [r4, #12]
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <cleanup_stdio+0x3c>)
 80005de:	4299      	cmp	r1, r3
 80005e0:	d004      	beq.n	80005ec <cleanup_stdio+0x30>
 80005e2:	4620      	mov	r0, r4
 80005e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005e8:	f000 bb96 	b.w	8000d18 <_fflush_r>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	bf00      	nop
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	200000e4 	.word	0x200000e4
 80005f8:	2000014c 	.word	0x2000014c

080005fc <global_stdio_init.part.0>:
 80005fc:	b510      	push	{r4, lr}
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <global_stdio_init.part.0+0x30>)
 8000600:	4c0b      	ldr	r4, [pc, #44]	@ (8000630 <global_stdio_init.part.0+0x34>)
 8000602:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <global_stdio_init.part.0+0x38>)
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	4620      	mov	r0, r4
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	f7ff ff94 	bl	8000538 <std>
 8000610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000614:	2201      	movs	r2, #1
 8000616:	2109      	movs	r1, #9
 8000618:	f7ff ff8e 	bl	8000538 <std>
 800061c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000620:	2202      	movs	r2, #2
 8000622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000626:	2112      	movs	r1, #18
 8000628:	f7ff bf86 	b.w	8000538 <std>
 800062c:	200001b4 	.word	0x200001b4
 8000630:	2000007c 	.word	0x2000007c
 8000634:	080005a5 	.word	0x080005a5

08000638 <__sfp_lock_acquire>:
 8000638:	4801      	ldr	r0, [pc, #4]	@ (8000640 <__sfp_lock_acquire+0x8>)
 800063a:	f000 b9ee 	b.w	8000a1a <__retarget_lock_acquire_recursive>
 800063e:	bf00      	nop
 8000640:	200001bd 	.word	0x200001bd

08000644 <__sfp_lock_release>:
 8000644:	4801      	ldr	r0, [pc, #4]	@ (800064c <__sfp_lock_release+0x8>)
 8000646:	f000 b9e9 	b.w	8000a1c <__retarget_lock_release_recursive>
 800064a:	bf00      	nop
 800064c:	200001bd 	.word	0x200001bd

08000650 <__sinit>:
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
 8000654:	f7ff fff0 	bl	8000638 <__sfp_lock_acquire>
 8000658:	6a23      	ldr	r3, [r4, #32]
 800065a:	b11b      	cbz	r3, 8000664 <__sinit+0x14>
 800065c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000660:	f7ff bff0 	b.w	8000644 <__sfp_lock_release>
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <__sinit+0x28>)
 8000666:	6223      	str	r3, [r4, #32]
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <__sinit+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f5      	bne.n	800065c <__sinit+0xc>
 8000670:	f7ff ffc4 	bl	80005fc <global_stdio_init.part.0>
 8000674:	e7f2      	b.n	800065c <__sinit+0xc>
 8000676:	bf00      	nop
 8000678:	080005bd 	.word	0x080005bd
 800067c:	200001b4 	.word	0x200001b4

08000680 <_fwalk_sglue>:
 8000680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000684:	4607      	mov	r7, r0
 8000686:	4688      	mov	r8, r1
 8000688:	4614      	mov	r4, r2
 800068a:	2600      	movs	r6, #0
 800068c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000690:	f1b9 0901 	subs.w	r9, r9, #1
 8000694:	d505      	bpl.n	80006a2 <_fwalk_sglue+0x22>
 8000696:	6824      	ldr	r4, [r4, #0]
 8000698:	2c00      	cmp	r4, #0
 800069a:	d1f7      	bne.n	800068c <_fwalk_sglue+0xc>
 800069c:	4630      	mov	r0, r6
 800069e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006a2:	89ab      	ldrh	r3, [r5, #12]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d907      	bls.n	80006b8 <_fwalk_sglue+0x38>
 80006a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006ac:	3301      	adds	r3, #1
 80006ae:	d003      	beq.n	80006b8 <_fwalk_sglue+0x38>
 80006b0:	4629      	mov	r1, r5
 80006b2:	4638      	mov	r0, r7
 80006b4:	47c0      	blx	r8
 80006b6:	4306      	orrs	r6, r0
 80006b8:	3568      	adds	r5, #104	@ 0x68
 80006ba:	e7e9      	b.n	8000690 <_fwalk_sglue+0x10>

080006bc <_puts_r>:
 80006bc:	6a03      	ldr	r3, [r0, #32]
 80006be:	b570      	push	{r4, r5, r6, lr}
 80006c0:	6884      	ldr	r4, [r0, #8]
 80006c2:	4605      	mov	r5, r0
 80006c4:	460e      	mov	r6, r1
 80006c6:	b90b      	cbnz	r3, 80006cc <_puts_r+0x10>
 80006c8:	f7ff ffc2 	bl	8000650 <__sinit>
 80006cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006ce:	07db      	lsls	r3, r3, #31
 80006d0:	d405      	bmi.n	80006de <_puts_r+0x22>
 80006d2:	89a3      	ldrh	r3, [r4, #12]
 80006d4:	0598      	lsls	r0, r3, #22
 80006d6:	d402      	bmi.n	80006de <_puts_r+0x22>
 80006d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006da:	f000 f99e 	bl	8000a1a <__retarget_lock_acquire_recursive>
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	0719      	lsls	r1, r3, #28
 80006e2:	d502      	bpl.n	80006ea <_puts_r+0x2e>
 80006e4:	6923      	ldr	r3, [r4, #16]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d135      	bne.n	8000756 <_puts_r+0x9a>
 80006ea:	4621      	mov	r1, r4
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f8c5 	bl	800087c <__swsetup_r>
 80006f2:	b380      	cbz	r0, 8000756 <_puts_r+0x9a>
 80006f4:	f04f 35ff 	mov.w	r5, #4294967295
 80006f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006fa:	07da      	lsls	r2, r3, #31
 80006fc:	d405      	bmi.n	800070a <_puts_r+0x4e>
 80006fe:	89a3      	ldrh	r3, [r4, #12]
 8000700:	059b      	lsls	r3, r3, #22
 8000702:	d402      	bmi.n	800070a <_puts_r+0x4e>
 8000704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000706:	f000 f989 	bl	8000a1c <__retarget_lock_release_recursive>
 800070a:	4628      	mov	r0, r5
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	2b00      	cmp	r3, #0
 8000710:	da04      	bge.n	800071c <_puts_r+0x60>
 8000712:	69a2      	ldr	r2, [r4, #24]
 8000714:	429a      	cmp	r2, r3
 8000716:	dc17      	bgt.n	8000748 <_puts_r+0x8c>
 8000718:	290a      	cmp	r1, #10
 800071a:	d015      	beq.n	8000748 <_puts_r+0x8c>
 800071c:	6823      	ldr	r3, [r4, #0]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	6022      	str	r2, [r4, #0]
 8000722:	7019      	strb	r1, [r3, #0]
 8000724:	68a3      	ldr	r3, [r4, #8]
 8000726:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800072a:	3b01      	subs	r3, #1
 800072c:	60a3      	str	r3, [r4, #8]
 800072e:	2900      	cmp	r1, #0
 8000730:	d1ed      	bne.n	800070e <_puts_r+0x52>
 8000732:	2b00      	cmp	r3, #0
 8000734:	da11      	bge.n	800075a <_puts_r+0x9e>
 8000736:	4622      	mov	r2, r4
 8000738:	210a      	movs	r1, #10
 800073a:	4628      	mov	r0, r5
 800073c:	f000 f85f 	bl	80007fe <__swbuf_r>
 8000740:	3001      	adds	r0, #1
 8000742:	d0d7      	beq.n	80006f4 <_puts_r+0x38>
 8000744:	250a      	movs	r5, #10
 8000746:	e7d7      	b.n	80006f8 <_puts_r+0x3c>
 8000748:	4622      	mov	r2, r4
 800074a:	4628      	mov	r0, r5
 800074c:	f000 f857 	bl	80007fe <__swbuf_r>
 8000750:	3001      	adds	r0, #1
 8000752:	d1e7      	bne.n	8000724 <_puts_r+0x68>
 8000754:	e7ce      	b.n	80006f4 <_puts_r+0x38>
 8000756:	3e01      	subs	r6, #1
 8000758:	e7e4      	b.n	8000724 <_puts_r+0x68>
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	6022      	str	r2, [r4, #0]
 8000760:	220a      	movs	r2, #10
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	e7ee      	b.n	8000744 <_puts_r+0x88>
	...

08000768 <puts>:
 8000768:	4b02      	ldr	r3, [pc, #8]	@ (8000774 <puts+0xc>)
 800076a:	4601      	mov	r1, r0
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f7ff bfa5 	b.w	80006bc <_puts_r>
 8000772:	bf00      	nop
 8000774:	2000000c 	.word	0x2000000c

08000778 <__sread>:
 8000778:	b510      	push	{r4, lr}
 800077a:	460c      	mov	r4, r1
 800077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000780:	f000 f8fc 	bl	800097c <_read_r>
 8000784:	2800      	cmp	r0, #0
 8000786:	bfab      	itete	ge
 8000788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800078a:	89a3      	ldrhlt	r3, [r4, #12]
 800078c:	181b      	addge	r3, r3, r0
 800078e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000792:	bfac      	ite	ge
 8000794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000796:	81a3      	strhlt	r3, [r4, #12]
 8000798:	bd10      	pop	{r4, pc}

0800079a <__swrite>:
 800079a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800079e:	461f      	mov	r7, r3
 80007a0:	898b      	ldrh	r3, [r1, #12]
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	4605      	mov	r5, r0
 80007a6:	460c      	mov	r4, r1
 80007a8:	4616      	mov	r6, r2
 80007aa:	d505      	bpl.n	80007b8 <__swrite+0x1e>
 80007ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007b0:	2302      	movs	r3, #2
 80007b2:	2200      	movs	r2, #0
 80007b4:	f000 f8d0 	bl	8000958 <_lseek_r>
 80007b8:	89a3      	ldrh	r3, [r4, #12]
 80007ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c2:	81a3      	strh	r3, [r4, #12]
 80007c4:	4632      	mov	r2, r6
 80007c6:	463b      	mov	r3, r7
 80007c8:	4628      	mov	r0, r5
 80007ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007ce:	f000 b8e7 	b.w	80009a0 <_write_r>

080007d2 <__sseek>:
 80007d2:	b510      	push	{r4, lr}
 80007d4:	460c      	mov	r4, r1
 80007d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007da:	f000 f8bd 	bl	8000958 <_lseek_r>
 80007de:	1c43      	adds	r3, r0, #1
 80007e0:	89a3      	ldrh	r3, [r4, #12]
 80007e2:	bf15      	itete	ne
 80007e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007ee:	81a3      	strheq	r3, [r4, #12]
 80007f0:	bf18      	it	ne
 80007f2:	81a3      	strhne	r3, [r4, #12]
 80007f4:	bd10      	pop	{r4, pc}

080007f6 <__sclose>:
 80007f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007fa:	f000 b89d 	b.w	8000938 <_close_r>

080007fe <__swbuf_r>:
 80007fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000800:	460e      	mov	r6, r1
 8000802:	4614      	mov	r4, r2
 8000804:	4605      	mov	r5, r0
 8000806:	b118      	cbz	r0, 8000810 <__swbuf_r+0x12>
 8000808:	6a03      	ldr	r3, [r0, #32]
 800080a:	b90b      	cbnz	r3, 8000810 <__swbuf_r+0x12>
 800080c:	f7ff ff20 	bl	8000650 <__sinit>
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	60a3      	str	r3, [r4, #8]
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	071a      	lsls	r2, r3, #28
 8000818:	d501      	bpl.n	800081e <__swbuf_r+0x20>
 800081a:	6923      	ldr	r3, [r4, #16]
 800081c:	b943      	cbnz	r3, 8000830 <__swbuf_r+0x32>
 800081e:	4621      	mov	r1, r4
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f82b 	bl	800087c <__swsetup_r>
 8000826:	b118      	cbz	r0, 8000830 <__swbuf_r+0x32>
 8000828:	f04f 37ff 	mov.w	r7, #4294967295
 800082c:	4638      	mov	r0, r7
 800082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	6922      	ldr	r2, [r4, #16]
 8000834:	1a98      	subs	r0, r3, r2
 8000836:	6963      	ldr	r3, [r4, #20]
 8000838:	b2f6      	uxtb	r6, r6
 800083a:	4283      	cmp	r3, r0
 800083c:	4637      	mov	r7, r6
 800083e:	dc05      	bgt.n	800084c <__swbuf_r+0x4e>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 fa68 	bl	8000d18 <_fflush_r>
 8000848:	2800      	cmp	r0, #0
 800084a:	d1ed      	bne.n	8000828 <__swbuf_r+0x2a>
 800084c:	68a3      	ldr	r3, [r4, #8]
 800084e:	3b01      	subs	r3, #1
 8000850:	60a3      	str	r3, [r4, #8]
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	701e      	strb	r6, [r3, #0]
 800085a:	6962      	ldr	r2, [r4, #20]
 800085c:	1c43      	adds	r3, r0, #1
 800085e:	429a      	cmp	r2, r3
 8000860:	d004      	beq.n	800086c <__swbuf_r+0x6e>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	07db      	lsls	r3, r3, #31
 8000866:	d5e1      	bpl.n	800082c <__swbuf_r+0x2e>
 8000868:	2e0a      	cmp	r6, #10
 800086a:	d1df      	bne.n	800082c <__swbuf_r+0x2e>
 800086c:	4621      	mov	r1, r4
 800086e:	4628      	mov	r0, r5
 8000870:	f000 fa52 	bl	8000d18 <_fflush_r>
 8000874:	2800      	cmp	r0, #0
 8000876:	d0d9      	beq.n	800082c <__swbuf_r+0x2e>
 8000878:	e7d6      	b.n	8000828 <__swbuf_r+0x2a>
	...

0800087c <__swsetup_r>:
 800087c:	b538      	push	{r3, r4, r5, lr}
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <__swsetup_r+0xa8>)
 8000880:	4605      	mov	r5, r0
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	460c      	mov	r4, r1
 8000886:	b118      	cbz	r0, 8000890 <__swsetup_r+0x14>
 8000888:	6a03      	ldr	r3, [r0, #32]
 800088a:	b90b      	cbnz	r3, 8000890 <__swsetup_r+0x14>
 800088c:	f7ff fee0 	bl	8000650 <__sinit>
 8000890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000894:	0719      	lsls	r1, r3, #28
 8000896:	d422      	bmi.n	80008de <__swsetup_r+0x62>
 8000898:	06da      	lsls	r2, r3, #27
 800089a:	d407      	bmi.n	80008ac <__swsetup_r+0x30>
 800089c:	2209      	movs	r2, #9
 800089e:	602a      	str	r2, [r5, #0]
 80008a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	e033      	b.n	8000914 <__swsetup_r+0x98>
 80008ac:	0758      	lsls	r0, r3, #29
 80008ae:	d512      	bpl.n	80008d6 <__swsetup_r+0x5a>
 80008b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008b2:	b141      	cbz	r1, 80008c6 <__swsetup_r+0x4a>
 80008b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008b8:	4299      	cmp	r1, r3
 80008ba:	d002      	beq.n	80008c2 <__swsetup_r+0x46>
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f8af 	bl	8000a20 <_free_r>
 80008c2:	2300      	movs	r3, #0
 80008c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008cc:	81a3      	strh	r3, [r4, #12]
 80008ce:	2300      	movs	r3, #0
 80008d0:	6063      	str	r3, [r4, #4]
 80008d2:	6923      	ldr	r3, [r4, #16]
 80008d4:	6023      	str	r3, [r4, #0]
 80008d6:	89a3      	ldrh	r3, [r4, #12]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	81a3      	strh	r3, [r4, #12]
 80008de:	6923      	ldr	r3, [r4, #16]
 80008e0:	b94b      	cbnz	r3, 80008f6 <__swsetup_r+0x7a>
 80008e2:	89a3      	ldrh	r3, [r4, #12]
 80008e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008ec:	d003      	beq.n	80008f6 <__swsetup_r+0x7a>
 80008ee:	4621      	mov	r1, r4
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 fa5f 	bl	8000db4 <__smakebuf_r>
 80008f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fa:	f013 0201 	ands.w	r2, r3, #1
 80008fe:	d00a      	beq.n	8000916 <__swsetup_r+0x9a>
 8000900:	2200      	movs	r2, #0
 8000902:	60a2      	str	r2, [r4, #8]
 8000904:	6962      	ldr	r2, [r4, #20]
 8000906:	4252      	negs	r2, r2
 8000908:	61a2      	str	r2, [r4, #24]
 800090a:	6922      	ldr	r2, [r4, #16]
 800090c:	b942      	cbnz	r2, 8000920 <__swsetup_r+0xa4>
 800090e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000912:	d1c5      	bne.n	80008a0 <__swsetup_r+0x24>
 8000914:	bd38      	pop	{r3, r4, r5, pc}
 8000916:	0799      	lsls	r1, r3, #30
 8000918:	bf58      	it	pl
 800091a:	6962      	ldrpl	r2, [r4, #20]
 800091c:	60a2      	str	r2, [r4, #8]
 800091e:	e7f4      	b.n	800090a <__swsetup_r+0x8e>
 8000920:	2000      	movs	r0, #0
 8000922:	e7f7      	b.n	8000914 <__swsetup_r+0x98>
 8000924:	2000000c 	.word	0x2000000c

08000928 <memset>:
 8000928:	4402      	add	r2, r0
 800092a:	4603      	mov	r3, r0
 800092c:	4293      	cmp	r3, r2
 800092e:	d100      	bne.n	8000932 <memset+0xa>
 8000930:	4770      	bx	lr
 8000932:	f803 1b01 	strb.w	r1, [r3], #1
 8000936:	e7f9      	b.n	800092c <memset+0x4>

08000938 <_close_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4d06      	ldr	r5, [pc, #24]	@ (8000954 <_close_r+0x1c>)
 800093c:	2300      	movs	r3, #0
 800093e:	4604      	mov	r4, r0
 8000940:	4608      	mov	r0, r1
 8000942:	602b      	str	r3, [r5, #0]
 8000944:	f7ff fd64 	bl	8000410 <_close>
 8000948:	1c43      	adds	r3, r0, #1
 800094a:	d102      	bne.n	8000952 <_close_r+0x1a>
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	b103      	cbz	r3, 8000952 <_close_r+0x1a>
 8000950:	6023      	str	r3, [r4, #0]
 8000952:	bd38      	pop	{r3, r4, r5, pc}
 8000954:	200001b8 	.word	0x200001b8

08000958 <_lseek_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4d07      	ldr	r5, [pc, #28]	@ (8000978 <_lseek_r+0x20>)
 800095c:	4604      	mov	r4, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4611      	mov	r1, r2
 8000962:	2200      	movs	r2, #0
 8000964:	602a      	str	r2, [r5, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	f7ff fd79 	bl	800045e <_lseek>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_lseek_r+0x1e>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_lseek_r+0x1e>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001b8 	.word	0x200001b8

0800097c <_read_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d07      	ldr	r5, [pc, #28]	@ (800099c <_read_r+0x20>)
 8000980:	4604      	mov	r4, r0
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	2200      	movs	r2, #0
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f7ff fd07 	bl	800039e <_read>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	d102      	bne.n	800099a <_read_r+0x1e>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b103      	cbz	r3, 800099a <_read_r+0x1e>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	200001b8 	.word	0x200001b8

080009a0 <_write_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4d07      	ldr	r5, [pc, #28]	@ (80009c0 <_write_r+0x20>)
 80009a4:	4604      	mov	r4, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	602a      	str	r2, [r5, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f7ff fd12 	bl	80003d8 <_write>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	d102      	bne.n	80009be <_write_r+0x1e>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b103      	cbz	r3, 80009be <_write_r+0x1e>
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	200001b8 	.word	0x200001b8

080009c4 <__errno>:
 80009c4:	4b01      	ldr	r3, [pc, #4]	@ (80009cc <__errno+0x8>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000a08 <__libc_init_array+0x38>)
 80009d4:	4c0d      	ldr	r4, [pc, #52]	@ (8000a0c <__libc_init_array+0x3c>)
 80009d6:	1b64      	subs	r4, r4, r5
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	2600      	movs	r6, #0
 80009dc:	42a6      	cmp	r6, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000a10 <__libc_init_array+0x40>)
 80009e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000a14 <__libc_init_array+0x44>)
 80009e4:	f000 fa54 	bl	8000e90 <_init>
 80009e8:	1b64      	subs	r4, r4, r5
 80009ea:	10a4      	asrs	r4, r4, #2
 80009ec:	2600      	movs	r6, #0
 80009ee:	42a6      	cmp	r6, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f8:	4798      	blx	r3
 80009fa:	3601      	adds	r6, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a02:	4798      	blx	r3
 8000a04:	3601      	adds	r6, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000f60 	.word	0x08000f60
 8000a0c:	08000f60 	.word	0x08000f60
 8000a10:	08000f60 	.word	0x08000f60
 8000a14:	08000f64 	.word	0x08000f64

08000a18 <__retarget_lock_init_recursive>:
 8000a18:	4770      	bx	lr

08000a1a <__retarget_lock_acquire_recursive>:
 8000a1a:	4770      	bx	lr

08000a1c <__retarget_lock_release_recursive>:
 8000a1c:	4770      	bx	lr
	...

08000a20 <_free_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4605      	mov	r5, r0
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d041      	beq.n	8000aac <_free_r+0x8c>
 8000a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a2c:	1f0c      	subs	r4, r1, #4
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	18e4      	addlt	r4, r4, r3
 8000a34:	f000 f8e0 	bl	8000bf8 <__malloc_lock>
 8000a38:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <_free_r+0x90>)
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	b933      	cbnz	r3, 8000a4c <_free_r+0x2c>
 8000a3e:	6063      	str	r3, [r4, #4]
 8000a40:	6014      	str	r4, [r2, #0]
 8000a42:	4628      	mov	r0, r5
 8000a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a48:	f000 b8dc 	b.w	8000c04 <__malloc_unlock>
 8000a4c:	42a3      	cmp	r3, r4
 8000a4e:	d908      	bls.n	8000a62 <_free_r+0x42>
 8000a50:	6820      	ldr	r0, [r4, #0]
 8000a52:	1821      	adds	r1, r4, r0
 8000a54:	428b      	cmp	r3, r1
 8000a56:	bf01      	itttt	eq
 8000a58:	6819      	ldreq	r1, [r3, #0]
 8000a5a:	685b      	ldreq	r3, [r3, #4]
 8000a5c:	1809      	addeq	r1, r1, r0
 8000a5e:	6021      	streq	r1, [r4, #0]
 8000a60:	e7ed      	b.n	8000a3e <_free_r+0x1e>
 8000a62:	461a      	mov	r2, r3
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	b10b      	cbz	r3, 8000a6c <_free_r+0x4c>
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	d9fa      	bls.n	8000a62 <_free_r+0x42>
 8000a6c:	6811      	ldr	r1, [r2, #0]
 8000a6e:	1850      	adds	r0, r2, r1
 8000a70:	42a0      	cmp	r0, r4
 8000a72:	d10b      	bne.n	8000a8c <_free_r+0x6c>
 8000a74:	6820      	ldr	r0, [r4, #0]
 8000a76:	4401      	add	r1, r0
 8000a78:	1850      	adds	r0, r2, r1
 8000a7a:	4283      	cmp	r3, r0
 8000a7c:	6011      	str	r1, [r2, #0]
 8000a7e:	d1e0      	bne.n	8000a42 <_free_r+0x22>
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	6053      	str	r3, [r2, #4]
 8000a86:	4408      	add	r0, r1
 8000a88:	6010      	str	r0, [r2, #0]
 8000a8a:	e7da      	b.n	8000a42 <_free_r+0x22>
 8000a8c:	d902      	bls.n	8000a94 <_free_r+0x74>
 8000a8e:	230c      	movs	r3, #12
 8000a90:	602b      	str	r3, [r5, #0]
 8000a92:	e7d6      	b.n	8000a42 <_free_r+0x22>
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	1821      	adds	r1, r4, r0
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	bf04      	itt	eq
 8000a9c:	6819      	ldreq	r1, [r3, #0]
 8000a9e:	685b      	ldreq	r3, [r3, #4]
 8000aa0:	6063      	str	r3, [r4, #4]
 8000aa2:	bf04      	itt	eq
 8000aa4:	1809      	addeq	r1, r1, r0
 8000aa6:	6021      	streq	r1, [r4, #0]
 8000aa8:	6054      	str	r4, [r2, #4]
 8000aaa:	e7ca      	b.n	8000a42 <_free_r+0x22>
 8000aac:	bd38      	pop	{r3, r4, r5, pc}
 8000aae:	bf00      	nop
 8000ab0:	200001c4 	.word	0x200001c4

08000ab4 <sbrk_aligned>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8000af4 <sbrk_aligned+0x40>)
 8000ab8:	460c      	mov	r4, r1
 8000aba:	6831      	ldr	r1, [r6, #0]
 8000abc:	4605      	mov	r5, r0
 8000abe:	b911      	cbnz	r1, 8000ac6 <sbrk_aligned+0x12>
 8000ac0:	f000 f9d6 	bl	8000e70 <_sbrk_r>
 8000ac4:	6030      	str	r0, [r6, #0]
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f000 f9d1 	bl	8000e70 <_sbrk_r>
 8000ace:	1c43      	adds	r3, r0, #1
 8000ad0:	d103      	bne.n	8000ada <sbrk_aligned+0x26>
 8000ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
 8000ada:	1cc4      	adds	r4, r0, #3
 8000adc:	f024 0403 	bic.w	r4, r4, #3
 8000ae0:	42a0      	cmp	r0, r4
 8000ae2:	d0f8      	beq.n	8000ad6 <sbrk_aligned+0x22>
 8000ae4:	1a21      	subs	r1, r4, r0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f000 f9c2 	bl	8000e70 <_sbrk_r>
 8000aec:	3001      	adds	r0, #1
 8000aee:	d1f2      	bne.n	8000ad6 <sbrk_aligned+0x22>
 8000af0:	e7ef      	b.n	8000ad2 <sbrk_aligned+0x1e>
 8000af2:	bf00      	nop
 8000af4:	200001c0 	.word	0x200001c0

08000af8 <_malloc_r>:
 8000af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000afc:	1ccd      	adds	r5, r1, #3
 8000afe:	f025 0503 	bic.w	r5, r5, #3
 8000b02:	3508      	adds	r5, #8
 8000b04:	2d0c      	cmp	r5, #12
 8000b06:	bf38      	it	cc
 8000b08:	250c      	movcc	r5, #12
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	db01      	blt.n	8000b14 <_malloc_r+0x1c>
 8000b10:	42a9      	cmp	r1, r5
 8000b12:	d904      	bls.n	8000b1e <_malloc_r+0x26>
 8000b14:	230c      	movs	r3, #12
 8000b16:	6033      	str	r3, [r6, #0]
 8000b18:	2000      	movs	r0, #0
 8000b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bf4 <_malloc_r+0xfc>
 8000b22:	f000 f869 	bl	8000bf8 <__malloc_lock>
 8000b26:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2a:	461c      	mov	r4, r3
 8000b2c:	bb44      	cbnz	r4, 8000b80 <_malloc_r+0x88>
 8000b2e:	4629      	mov	r1, r5
 8000b30:	4630      	mov	r0, r6
 8000b32:	f7ff ffbf 	bl	8000ab4 <sbrk_aligned>
 8000b36:	1c43      	adds	r3, r0, #1
 8000b38:	4604      	mov	r4, r0
 8000b3a:	d158      	bne.n	8000bee <_malloc_r+0xf6>
 8000b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b40:	4627      	mov	r7, r4
 8000b42:	2f00      	cmp	r7, #0
 8000b44:	d143      	bne.n	8000bce <_malloc_r+0xd6>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d04b      	beq.n	8000be2 <_malloc_r+0xea>
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	4630      	mov	r0, r6
 8000b50:	eb04 0903 	add.w	r9, r4, r3
 8000b54:	f000 f98c 	bl	8000e70 <_sbrk_r>
 8000b58:	4581      	cmp	r9, r0
 8000b5a:	d142      	bne.n	8000be2 <_malloc_r+0xea>
 8000b5c:	6821      	ldr	r1, [r4, #0]
 8000b5e:	1a6d      	subs	r5, r5, r1
 8000b60:	4629      	mov	r1, r5
 8000b62:	4630      	mov	r0, r6
 8000b64:	f7ff ffa6 	bl	8000ab4 <sbrk_aligned>
 8000b68:	3001      	adds	r0, #1
 8000b6a:	d03a      	beq.n	8000be2 <_malloc_r+0xea>
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	442b      	add	r3, r5
 8000b70:	6023      	str	r3, [r4, #0]
 8000b72:	f8d8 3000 	ldr.w	r3, [r8]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	bb62      	cbnz	r2, 8000bd4 <_malloc_r+0xdc>
 8000b7a:	f8c8 7000 	str.w	r7, [r8]
 8000b7e:	e00f      	b.n	8000ba0 <_malloc_r+0xa8>
 8000b80:	6822      	ldr	r2, [r4, #0]
 8000b82:	1b52      	subs	r2, r2, r5
 8000b84:	d420      	bmi.n	8000bc8 <_malloc_r+0xd0>
 8000b86:	2a0b      	cmp	r2, #11
 8000b88:	d917      	bls.n	8000bba <_malloc_r+0xc2>
 8000b8a:	1961      	adds	r1, r4, r5
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	6025      	str	r5, [r4, #0]
 8000b90:	bf18      	it	ne
 8000b92:	6059      	strne	r1, [r3, #4]
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	bf08      	it	eq
 8000b98:	f8c8 1000 	streq.w	r1, [r8]
 8000b9c:	5162      	str	r2, [r4, r5]
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f000 f82f 	bl	8000c04 <__malloc_unlock>
 8000ba6:	f104 000b 	add.w	r0, r4, #11
 8000baa:	1d23      	adds	r3, r4, #4
 8000bac:	f020 0007 	bic.w	r0, r0, #7
 8000bb0:	1ac2      	subs	r2, r0, r3
 8000bb2:	bf1c      	itt	ne
 8000bb4:	1a1b      	subne	r3, r3, r0
 8000bb6:	50a3      	strne	r3, [r4, r2]
 8000bb8:	e7af      	b.n	8000b1a <_malloc_r+0x22>
 8000bba:	6862      	ldr	r2, [r4, #4]
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	bf0c      	ite	eq
 8000bc0:	f8c8 2000 	streq.w	r2, [r8]
 8000bc4:	605a      	strne	r2, [r3, #4]
 8000bc6:	e7eb      	b.n	8000ba0 <_malloc_r+0xa8>
 8000bc8:	4623      	mov	r3, r4
 8000bca:	6864      	ldr	r4, [r4, #4]
 8000bcc:	e7ae      	b.n	8000b2c <_malloc_r+0x34>
 8000bce:	463c      	mov	r4, r7
 8000bd0:	687f      	ldr	r7, [r7, #4]
 8000bd2:	e7b6      	b.n	8000b42 <_malloc_r+0x4a>
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	42a3      	cmp	r3, r4
 8000bda:	d1fb      	bne.n	8000bd4 <_malloc_r+0xdc>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6053      	str	r3, [r2, #4]
 8000be0:	e7de      	b.n	8000ba0 <_malloc_r+0xa8>
 8000be2:	230c      	movs	r3, #12
 8000be4:	6033      	str	r3, [r6, #0]
 8000be6:	4630      	mov	r0, r6
 8000be8:	f000 f80c 	bl	8000c04 <__malloc_unlock>
 8000bec:	e794      	b.n	8000b18 <_malloc_r+0x20>
 8000bee:	6005      	str	r5, [r0, #0]
 8000bf0:	e7d6      	b.n	8000ba0 <_malloc_r+0xa8>
 8000bf2:	bf00      	nop
 8000bf4:	200001c4 	.word	0x200001c4

08000bf8 <__malloc_lock>:
 8000bf8:	4801      	ldr	r0, [pc, #4]	@ (8000c00 <__malloc_lock+0x8>)
 8000bfa:	f7ff bf0e 	b.w	8000a1a <__retarget_lock_acquire_recursive>
 8000bfe:	bf00      	nop
 8000c00:	200001bc 	.word	0x200001bc

08000c04 <__malloc_unlock>:
 8000c04:	4801      	ldr	r0, [pc, #4]	@ (8000c0c <__malloc_unlock+0x8>)
 8000c06:	f7ff bf09 	b.w	8000a1c <__retarget_lock_release_recursive>
 8000c0a:	bf00      	nop
 8000c0c:	200001bc 	.word	0x200001bc

08000c10 <__sflush_r>:
 8000c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c18:	0716      	lsls	r6, r2, #28
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	d454      	bmi.n	8000cca <__sflush_r+0xba>
 8000c20:	684b      	ldr	r3, [r1, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dc02      	bgt.n	8000c2c <__sflush_r+0x1c>
 8000c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd48      	ble.n	8000cbe <__sflush_r+0xae>
 8000c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d045      	beq.n	8000cbe <__sflush_r+0xae>
 8000c32:	2300      	movs	r3, #0
 8000c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c38:	682f      	ldr	r7, [r5, #0]
 8000c3a:	6a21      	ldr	r1, [r4, #32]
 8000c3c:	602b      	str	r3, [r5, #0]
 8000c3e:	d030      	beq.n	8000ca2 <__sflush_r+0x92>
 8000c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c42:	89a3      	ldrh	r3, [r4, #12]
 8000c44:	0759      	lsls	r1, r3, #29
 8000c46:	d505      	bpl.n	8000c54 <__sflush_r+0x44>
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c4e:	b10b      	cbz	r3, 8000c54 <__sflush_r+0x44>
 8000c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c58:	6a21      	ldr	r1, [r4, #32]
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	47b0      	blx	r6
 8000c5e:	1c43      	adds	r3, r0, #1
 8000c60:	89a3      	ldrh	r3, [r4, #12]
 8000c62:	d106      	bne.n	8000c72 <__sflush_r+0x62>
 8000c64:	6829      	ldr	r1, [r5, #0]
 8000c66:	291d      	cmp	r1, #29
 8000c68:	d82b      	bhi.n	8000cc2 <__sflush_r+0xb2>
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <__sflush_r+0x104>)
 8000c6c:	40ca      	lsrs	r2, r1
 8000c6e:	07d6      	lsls	r6, r2, #31
 8000c70:	d527      	bpl.n	8000cc2 <__sflush_r+0xb2>
 8000c72:	2200      	movs	r2, #0
 8000c74:	6062      	str	r2, [r4, #4]
 8000c76:	04d9      	lsls	r1, r3, #19
 8000c78:	6922      	ldr	r2, [r4, #16]
 8000c7a:	6022      	str	r2, [r4, #0]
 8000c7c:	d504      	bpl.n	8000c88 <__sflush_r+0x78>
 8000c7e:	1c42      	adds	r2, r0, #1
 8000c80:	d101      	bne.n	8000c86 <__sflush_r+0x76>
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	b903      	cbnz	r3, 8000c88 <__sflush_r+0x78>
 8000c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c8a:	602f      	str	r7, [r5, #0]
 8000c8c:	b1b9      	cbz	r1, 8000cbe <__sflush_r+0xae>
 8000c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d002      	beq.n	8000c9c <__sflush_r+0x8c>
 8000c96:	4628      	mov	r0, r5
 8000c98:	f7ff fec2 	bl	8000a20 <_free_r>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ca0:	e00d      	b.n	8000cbe <__sflush_r+0xae>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	47b0      	blx	r6
 8000ca8:	4602      	mov	r2, r0
 8000caa:	1c50      	adds	r0, r2, #1
 8000cac:	d1c9      	bne.n	8000c42 <__sflush_r+0x32>
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0c6      	beq.n	8000c42 <__sflush_r+0x32>
 8000cb4:	2b1d      	cmp	r3, #29
 8000cb6:	d001      	beq.n	8000cbc <__sflush_r+0xac>
 8000cb8:	2b16      	cmp	r3, #22
 8000cba:	d11e      	bne.n	8000cfa <__sflush_r+0xea>
 8000cbc:	602f      	str	r7, [r5, #0]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	e022      	b.n	8000d08 <__sflush_r+0xf8>
 8000cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	e01b      	b.n	8000d02 <__sflush_r+0xf2>
 8000cca:	690f      	ldr	r7, [r1, #16]
 8000ccc:	2f00      	cmp	r7, #0
 8000cce:	d0f6      	beq.n	8000cbe <__sflush_r+0xae>
 8000cd0:	0793      	lsls	r3, r2, #30
 8000cd2:	680e      	ldr	r6, [r1, #0]
 8000cd4:	bf08      	it	eq
 8000cd6:	694b      	ldreq	r3, [r1, #20]
 8000cd8:	600f      	str	r7, [r1, #0]
 8000cda:	bf18      	it	ne
 8000cdc:	2300      	movne	r3, #0
 8000cde:	eba6 0807 	sub.w	r8, r6, r7
 8000ce2:	608b      	str	r3, [r1, #8]
 8000ce4:	f1b8 0f00 	cmp.w	r8, #0
 8000ce8:	dde9      	ble.n	8000cbe <__sflush_r+0xae>
 8000cea:	6a21      	ldr	r1, [r4, #32]
 8000cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000cee:	4643      	mov	r3, r8
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	47b0      	blx	r6
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	dc08      	bgt.n	8000d0c <__sflush_r+0xfc>
 8000cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d02:	81a3      	strh	r3, [r4, #12]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0c:	4407      	add	r7, r0
 8000d0e:	eba8 0800 	sub.w	r8, r8, r0
 8000d12:	e7e7      	b.n	8000ce4 <__sflush_r+0xd4>
 8000d14:	20400001 	.word	0x20400001

08000d18 <_fflush_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	690b      	ldr	r3, [r1, #16]
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	b913      	cbnz	r3, 8000d28 <_fflush_r+0x10>
 8000d22:	2500      	movs	r5, #0
 8000d24:	4628      	mov	r0, r5
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	b118      	cbz	r0, 8000d32 <_fflush_r+0x1a>
 8000d2a:	6a03      	ldr	r3, [r0, #32]
 8000d2c:	b90b      	cbnz	r3, 8000d32 <_fflush_r+0x1a>
 8000d2e:	f7ff fc8f 	bl	8000650 <__sinit>
 8000d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f3      	beq.n	8000d22 <_fflush_r+0xa>
 8000d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d3c:	07d0      	lsls	r0, r2, #31
 8000d3e:	d404      	bmi.n	8000d4a <_fflush_r+0x32>
 8000d40:	0599      	lsls	r1, r3, #22
 8000d42:	d402      	bmi.n	8000d4a <_fflush_r+0x32>
 8000d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d46:	f7ff fe68 	bl	8000a1a <__retarget_lock_acquire_recursive>
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff ff5f 	bl	8000c10 <__sflush_r>
 8000d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d54:	07da      	lsls	r2, r3, #31
 8000d56:	4605      	mov	r5, r0
 8000d58:	d4e4      	bmi.n	8000d24 <_fflush_r+0xc>
 8000d5a:	89a3      	ldrh	r3, [r4, #12]
 8000d5c:	059b      	lsls	r3, r3, #22
 8000d5e:	d4e1      	bmi.n	8000d24 <_fflush_r+0xc>
 8000d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d62:	f7ff fe5b 	bl	8000a1c <__retarget_lock_release_recursive>
 8000d66:	e7dd      	b.n	8000d24 <_fflush_r+0xc>

08000d68 <__swhatbuf_r>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d70:	2900      	cmp	r1, #0
 8000d72:	b096      	sub	sp, #88	@ 0x58
 8000d74:	4615      	mov	r5, r2
 8000d76:	461e      	mov	r6, r3
 8000d78:	da0d      	bge.n	8000d96 <__swhatbuf_r+0x2e>
 8000d7a:	89a3      	ldrh	r3, [r4, #12]
 8000d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d80:	f04f 0100 	mov.w	r1, #0
 8000d84:	bf14      	ite	ne
 8000d86:	2340      	movne	r3, #64	@ 0x40
 8000d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	6031      	str	r1, [r6, #0]
 8000d90:	602b      	str	r3, [r5, #0]
 8000d92:	b016      	add	sp, #88	@ 0x58
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
 8000d96:	466a      	mov	r2, sp
 8000d98:	f000 f848 	bl	8000e2c <_fstat_r>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	dbec      	blt.n	8000d7a <__swhatbuf_r+0x12>
 8000da0:	9901      	ldr	r1, [sp, #4]
 8000da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000daa:	4259      	negs	r1, r3
 8000dac:	4159      	adcs	r1, r3
 8000dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db2:	e7eb      	b.n	8000d8c <__swhatbuf_r+0x24>

08000db4 <__smakebuf_r>:
 8000db4:	898b      	ldrh	r3, [r1, #12]
 8000db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000db8:	079d      	lsls	r5, r3, #30
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	d507      	bpl.n	8000dd0 <__smakebuf_r+0x1c>
 8000dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000dc4:	6023      	str	r3, [r4, #0]
 8000dc6:	6123      	str	r3, [r4, #16]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	6163      	str	r3, [r4, #20]
 8000dcc:	b003      	add	sp, #12
 8000dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd0:	ab01      	add	r3, sp, #4
 8000dd2:	466a      	mov	r2, sp
 8000dd4:	f7ff ffc8 	bl	8000d68 <__swhatbuf_r>
 8000dd8:	9f00      	ldr	r7, [sp, #0]
 8000dda:	4605      	mov	r5, r0
 8000ddc:	4639      	mov	r1, r7
 8000dde:	4630      	mov	r0, r6
 8000de0:	f7ff fe8a 	bl	8000af8 <_malloc_r>
 8000de4:	b948      	cbnz	r0, 8000dfa <__smakebuf_r+0x46>
 8000de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dea:	059a      	lsls	r2, r3, #22
 8000dec:	d4ee      	bmi.n	8000dcc <__smakebuf_r+0x18>
 8000dee:	f023 0303 	bic.w	r3, r3, #3
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	81a3      	strh	r3, [r4, #12]
 8000df8:	e7e2      	b.n	8000dc0 <__smakebuf_r+0xc>
 8000dfa:	89a3      	ldrh	r3, [r4, #12]
 8000dfc:	6020      	str	r0, [r4, #0]
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e0a:	b15b      	cbz	r3, 8000e24 <__smakebuf_r+0x70>
 8000e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e10:	4630      	mov	r0, r6
 8000e12:	f000 f81d 	bl	8000e50 <_isatty_r>
 8000e16:	b128      	cbz	r0, 8000e24 <__smakebuf_r+0x70>
 8000e18:	89a3      	ldrh	r3, [r4, #12]
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	81a3      	strh	r3, [r4, #12]
 8000e24:	89a3      	ldrh	r3, [r4, #12]
 8000e26:	431d      	orrs	r5, r3
 8000e28:	81a5      	strh	r5, [r4, #12]
 8000e2a:	e7cf      	b.n	8000dcc <__smakebuf_r+0x18>

08000e2c <_fstat_r>:
 8000e2c:	b538      	push	{r3, r4, r5, lr}
 8000e2e:	4d07      	ldr	r5, [pc, #28]	@ (8000e4c <_fstat_r+0x20>)
 8000e30:	2300      	movs	r3, #0
 8000e32:	4604      	mov	r4, r0
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	f7ff faf5 	bl	8000428 <_fstat>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	d102      	bne.n	8000e48 <_fstat_r+0x1c>
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	b103      	cbz	r3, 8000e48 <_fstat_r+0x1c>
 8000e46:	6023      	str	r3, [r4, #0]
 8000e48:	bd38      	pop	{r3, r4, r5, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001b8 	.word	0x200001b8

08000e50 <_isatty_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4d06      	ldr	r5, [pc, #24]	@ (8000e6c <_isatty_r+0x1c>)
 8000e54:	2300      	movs	r3, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	602b      	str	r3, [r5, #0]
 8000e5c:	f7ff faf4 	bl	8000448 <_isatty>
 8000e60:	1c43      	adds	r3, r0, #1
 8000e62:	d102      	bne.n	8000e6a <_isatty_r+0x1a>
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	b103      	cbz	r3, 8000e6a <_isatty_r+0x1a>
 8000e68:	6023      	str	r3, [r4, #0]
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	200001b8 	.word	0x200001b8

08000e70 <_sbrk_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4d06      	ldr	r5, [pc, #24]	@ (8000e8c <_sbrk_r+0x1c>)
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	602b      	str	r3, [r5, #0]
 8000e7c:	f7ff fafc 	bl	8000478 <_sbrk>
 8000e80:	1c43      	adds	r3, r0, #1
 8000e82:	d102      	bne.n	8000e8a <_sbrk_r+0x1a>
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	b103      	cbz	r3, 8000e8a <_sbrk_r+0x1a>
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	200001b8 	.word	0x200001b8

08000e90 <_init>:
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	bf00      	nop
 8000e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	469e      	mov	lr, r3
 8000e9a:	4770      	bx	lr

08000e9c <_fini>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr
