/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
	uint32_t *pSTIR = (uint32_t*)0xE000EF00;
	uint32_t *pISER0 = (uint32_t*)0xE000E100;

	/* enable IRQ3 interrupt */
	*pISER0 |= (1 << 3);

	/* generate an interrupt from software for IRQ3 */
	*pSTIR = (3 & 0x1FF);
}


int main(void)
{

	/* Demonstrate inline assembly coding */
	__asm volatile ("LDR R1, =#0X20001000");
	__asm volatile ("LDR R2, =#0X20001004");
	__asm volatile ("LDR R0, [R1]");
	__asm volatile ("LDR R1, [R2]");
	__asm volatile ("ADD R0, R0, R1");
	__asm volatile ("STR R0, [R2]");

	int val1=50;
	int val2 = 10;
	__asm volatile ("ADD R0, %0, %1": :"r"(val1),"r"(val2));


	/* print line on SVC
	while(1){
	printf("Hello World!\n");
	};
	*/

	/* demonstrate interrupt mode */
	/*
	printf("In thread mode : before interrupt\n");

	generate_interrupt();

	printf("In thread mode : after interrupt\n");
	*/

	/* Loop forever */
	for(;;);
}

void RTC_WKUP_IRQHandler(void)
{
	printf("in handler mode : ISR\n");
}
